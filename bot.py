import telebot
import logging
from database import create_table, insert_row, count_all_symbol
from speechkit import text_to_speech
from telebot.types import BotCommand, BotCommandScope, ReplyKeyboardMarkup
from system_config import admin_id, MAX_USER_TTS_SYMBOLS, MAX_TTS_SYMBOLS
from dotenv import load_dotenv
from os import getenv

load_dotenv()
TOKEN = getenv("TOKEN")
admin_id = int(admin_id)
bot = telebot.TeleBot(token=TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
create_table()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H",
    filename="log_file.log",
    filemode="w",
    force=True)


# –ö–æ–º–∞–Ω–¥–∞ /debug —Å –¥–æ—Å—Ç—É–ø–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['debug'])
def send_logs(message):
    user_id = message.chat.id

    if user_id == admin_id:
        try:

            with open("log_file.txt", "rb") as f:
                bot.send_document(message.chat.id, f)
                logging.info("–ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except telebot.apihelper.ApiTelegramException:

            bot.send_message(message.chat.id, "–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logging.info(f"{user_id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º, –Ω–µ —è–≤–ª—è—è—Å—å –∞–¥–º–∏–Ω–æ–º")


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üó£Ô∏è –û–∑–≤—É—á–∏—Ç—å")


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é SpeechKit. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üó£Ô∏è –û–∑–≤—É—á–∏—Ç—å' –∏ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏.",
        reply_markup=main_menu_keyboard)
    commands = [  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –æ–±–ª–∞—Å—Ç—å—é –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        BotCommand('start', '–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
        BotCommand('help', '–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'),
        BotCommand('tts', '–æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç')]
    bot.set_my_commands(commands)
    BotCommandScope('private', chat_id=message.chat.id)


# –∫–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def about_bot(message):
    bot.send_message(message.chat.id, '–¢–∞–∫ –∫–∞–∫ —è –∏—Å–ø–æ–ª—å–∑—É—é –ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, —Ç–æ —É –≤–∞—Å '
                                      '<b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏.\n\n'
                                      '<b>–ß—Ç–æ —Ç–∞–∫–æ–µ SpeechKit?</b>\n'
                                      '<b>SpeechKit</b> - —ç—Ç–æ –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, '
                                      '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π –Ø–Ω–¥–µ–∫—Å. –û–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏, '
                                      '—Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏, –∞ —Ç–∞–∫–∂–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—ã–µ '
                                      '–∫–æ–º–∞–Ω–¥—ã.\n\n'
                                      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤—ã —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –Ω–∞–∂–∞–≤ '
                                      '–Ω–∞ –∫–Ω–æ–ø–∫—É <b>"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"</b>.\n'
                                      '<b>üó£Ô∏è –û–∑–≤—É—á–∏—Ç—å</b> - –Ω–∞—á–Ω–∏—Ç–µ –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.',
                     reply_markup=main_menu_keyboard, parse_mode="html")


@bot.message_handler(content_types=["text"], func=lambda message: message.text.lower() == "üó£Ô∏è –æ–∑–≤—É—á–∏—Ç—å")
@bot.message_handler(commands=['tts'])
def tts_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ. –¢–∞–∫–∂–µ, –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—á–µ–ª–æ–≤–µ—á–µ–Ω—å—è –∞—É–¥–∏–æ '
                              '–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n\n'
                              '–î–ª—è —É–¥–∞—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ "+". –ù–∞–ø—Ä–∏–º–µ—Ä:\n–Ø —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä+–µ–Ω–∏–µ –Ω–∞ –±—É–∫–≤—É –µ.\n\n'
                              '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "** **". –ù–∞–ø—Ä–∏–º–µ—Ä: \n–Ø —Ö–æ—á—É '
                              '**–∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å**.\n\n'
                              'sil<[300]> - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—É–∑—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ 300 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥. –ù–∞–ø—Ä–∏–º–µ—Ä:\n –ê –≤–æ—Ç –∑–¥–µ—Å—å '
                              'sil<[300]> —Å–¥–µ–ª–∞–µ–º –ø–∞—É–∑—É.\n\n'
                              '<[tiny]>, <[small]>, <[medium]>, <[large]>, <[huge]> —Ç–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–∞—É–∑—É '
                              '—Ä–∞–∑–ª–∏—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n'
                              '‚è∏Ô∏è –ü–∞—É–∑—ã –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–µ—á—å –±–æ–ª–µ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π –∏ –ø–æ–Ω—è—Ç–Ω–æ–π.')
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —è –µ–≥–æ –æ–∑–≤—É—á–∏–ª!')
    bot.register_next_step_handler(message, tts)


# –≤—ã–∑–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(content_types=["text"], func=lambda message: message.text.lower() == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def send_stats(message):
    user_id = message.from_user.id
    text_symbols = len(message.text)

    # –§—É–Ω–∫—Ü–∏—è –∏–∑ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏–º–≤–æ–ª–æ–≤
    all_symbols = count_all_symbol(user_id) + int(
        text_symbols) - 12  # –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 12, –ø–æ—ç—Ç–æ–º—É –≤—ã—á—Ç–µ–º

    bot.send_message(message.chat.id, "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                                      f"<b>–°–∏–º–≤–æ–ª–æ–≤ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ:</b> {all_symbols}\n"
                                      f"<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:</b> {MAX_USER_TTS_SYMBOLS}\n\n",
                     parse_mode="html")


@bot.message_handler(commands=['tts'])
def tts_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —è –µ–≥–æ –æ–∑–≤—É—á–∏–ª!')
    bot.register_next_step_handler(message, tts)


# —Ñ—É–Ω–∫—Ü–∏—è, –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∞—è –∞—É–¥–∏–æ –æ—Ç speechkit
def tts(message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if message.content_type != 'text':
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        return

        # –°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    text_symbol = is_tts_symbol_limit(message, text)
    if text_symbol is None:
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ë–î
    insert_row(user_id, text, text_symbol)

    success, response = text_to_speech(message.text)

    if success:
        with open('output.ogg', 'wb') as audio_file:
            audio_file.write(response)
        voice = open('output.ogg', 'rb')
        bot.send_voice(chat_id=message.chat.id, voice=voice)
        voice.close()
        logging.info(f"{user_id} –ø–æ–ª—É—á–∏–ª —Å–≤–æ—ë –∞—É–¥–∏–æ")
    else:
        bot.send_message(chat_id=message.chat.id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")


# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–æ–∫–µ–Ω–æ–≤
def is_tts_symbol_limit(message, text):
    user_id = message.from_user.id
    text_symbols = len(text)

    # –§—É–Ω–∫—Ü–∏—è –∏–∑ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏–º–≤–æ–ª–æ–≤
    all_symbols = count_all_symbol(user_id) + text_symbols

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º all_symbols —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∏–º–≤–æ–ª–æ–≤
    if all_symbols >= MAX_USER_TTS_SYMBOLS:
        msg = (f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit TTS {MAX_USER_TTS_SYMBOLS}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {all_symbols} —Å–∏–º–≤–æ–ª–æ–≤. "
               f"–î–æ—Å—Ç—É–ø–Ω–æ: {MAX_USER_TTS_SYMBOLS - all_symbols}")
        bot.send_message(user_id, msg)
        return None

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    if text_symbols >= MAX_TTS_SYMBOLS:
        msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç SpeechKit TTS –Ω–∞ –∑–∞–ø—Ä–æ—Å {MAX_TTS_SYMBOLS}, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {text_symbols} —Å–∏–º–≤–æ–ª–æ–≤"
        bot.send_message(user_id, msg)
        return None
    return len(text)


CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice"]


@bot.message_handler(content_types=CONTENT_TYPES)
def any_msg(message):
    bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üó£Ô∏è –û–∑–≤—É—á–∏—Ç—å"',
                     reply_markup=main_menu_keyboard)


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ üéâ
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
